---
- name: Clean previous runs of k3s-init
  tags: k3s_server
  ansible.builtin.systemd:
    name: k3s-init
    state: stopped
  failed_when: false

- name: Clean previous runs of k3s-init # noqa args
  tags: k3s_server
  ansible.builtin.command:
    cmd: systemctl reset-failed k3s-init
  args:
    warn: false # The ansible systemd module does not support reset-failed
  failed_when: false
  changed_when: false

- name: Init cluster inside the transient k3s-init service # noqa args
  tags: k3s_server
  ansible.builtin.command:
    argv:
      - systemd-run
      - -p RestartSec=2
      - -p Restart=on-failure
      - --unit=k3s-init
      - -k3s server {{ server_init_args }}
    creates: "{{ systemd_dir }}/k3s.service"

- name: Verification
  tags: k3s_server
  block:
    - name: Verify that all nodes actually joined (check k3s-init.service if this fails)
      tags: k3s_server
      ansible.builtin.command:
        cmd: k3s kubectl get nodes -l "node-role.kubernetes.io/master=true" -o=jsonpath="{.items[*].metadata.name}"
      register: nodes
      until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups['k3s_server'] | length)
      retries: 20
      delay: 10
      changed_when: false
  always:
    - name: Kill the temporary service used for initialization
      tags: k3s_server
      ansible.builtin.systemd:
        name: k3s-init
        state: stopped
      failed_when: false

- name: Copy K3s service file
  tags: k3s_server
  register: k3s_service
  ansible.builtin.template:
    src: "k3s-server.service.j2"
    dest: "{{ systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: 0755

- name: Enable and check K3s service
  tags: k3s_server
  ansible.builtin.systemd:
    name: k3s
    daemon_reload: true
    state: restarted
    enabled: true

- name: Wait for node-token
  tags: k3s_server
  ansible.builtin.wait_for:
    path: /var/lib/rancher/k3s/server/node-token

- name: Register node-token file access mode
  tags: k3s_server
  ansible.builtin.stat:
    path: /var/lib/rancher/k3s/server
  register: p

- name: Change file access node-token
  tags: k3s_server
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server
    mode: "g+rx,o+rx"

- name: Read node-token from master
  tags: k3s_server
  ansible.builtin.slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: node_token

- name: Store Master node-token
  tags: k3s_server
  ansible.builtin.set_fact:
    token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

- name: Restore node-token file access
  tags: k3s_server
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server
    mode: "{{ p.stat.mode }}"

- name: Create directory .kube
  tags: k3s_server
  ansible.builtin.file:
    path: ~{{ kubectl_user }}/.kube
    state: directory
    owner: "{{ kubectl_user }}"
    mode: "u=rwx,g=rx,o="

- name: Copy config file to user home directory
  tags: k3s_server
  ansible.builtin.copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ~{{ kubectl_user }}/.kube/config
    remote_src: true
    owner: "{{ kubectl_user }}"
    mode: 0600

- name: Configure kubectl cluster to https://{{ apiserver_endpoint }}
  tags: k3s_server
  ansible.builtin.command: >-
    k3s kubectl config set-cluster default
      --server=https://{{ apiserver_endpoint }}:6443
      --kubeconfig ~{{ kubectl_user }}/.kube/config
  changed_when: true

- name: Create kubectl symlink
  tags: k3s_server
  ansible.builtin.file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link

- name: Create crictl symlink
  tags: k3s_server
  ansible.builtin.file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link
